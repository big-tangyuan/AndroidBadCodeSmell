package tang.ui;

import com.intellij.ide.highlighter.JavaFileType;
import com.intellij.ide.highlighter.XmlFileType;
import com.intellij.openapi.fileChooser.FileChooser;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiManager;
import com.intellij.psi.search.FileTypeIndex;
import com.intellij.psi.search.GlobalSearchScope;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.openapi.project.Project;
import org.apache.commons.lang3.StringUtils;
import org.eclipse.jface.text.BadLocationException;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * @Author TangZT
 */
public class StartDialog extends JDialog {

    private Project project;
    private JPanel jPanel;
    private JTextField chooseFileField;
    private JButton btr_chooseFile;
    private JButton btr_run;
    private JList fileList;
    private JCheckBox HMSmell;
    private JCheckBox NONStaticSmell;
    private JCheckBox SQLSmell;
    private JCheckBox FileDirSmell;
    private JCheckBox LogSmell;
    private JCheckBox LogTagSmell;
    private VirtualFile[] virtualFiles;
    private ArrayList<File> javaFiles;
    private ArrayList<File> xmlFiles;
    private List<JCheckBox> smells;
    private Boolean[] choosedSmells = new Boolean[]{true, true, true, true, true, true};

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        jPanel = new JPanel();
        jPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        jPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        chooseFileField = new JTextField();
        panel1.add(chooseFileField, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("选择要解析的文件/文件夹");
        panel1.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btr_chooseFile.setText("...");
        panel1.add(btr_chooseFile, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileList = new JList();
        panel1.add(fileList, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        jPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btr_run = new JButton();
        btr_run.setText("启动检测");
        panel2.add(btr_run, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        HMSmell = new JCheckBox();
        HMSmell.setText("HMSmell");
        panel3.add(HMSmell, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        NONStaticSmell = new JCheckBox();
        NONStaticSmell.setText("NONStaticSmell");
        panel3.add(NONStaticSmell, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SQLSmell = new JCheckBox();
        SQLSmell.setText("SQLSmell");
        panel3.add(SQLSmell, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FileDirSmell = new JCheckBox();
        FileDirSmell.setText("FileDirSmell");
        panel3.add(FileDirSmell, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LogSmell = new JCheckBox();
        LogSmell.setText("LogSmell");
        panel3.add(LogSmell, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LogTagSmell = new JCheckBox();
        LogTagSmell.setText("LogTagSmell");
        panel3.add(LogTagSmell, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jPanel;
    }

    public StartDialog(@NotNull String path, Project project) {
        btr_chooseFile = new JButton();
        //btr_run = new JButton();
        $$$setupUI$$$();
        init(path);
        this.project = project;
    }


    private void init(String filePath) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                pack();
                setLocationRelativeTo(null);
                setSize(700, 500);
                // 设置模态对话框
                setModal(true);
                setContentPane(jPanel);
                setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("安卓坏味道解析");
                setVisible(true);

            }
        });
        smells = new ArrayList<>();
        smells.add(HMSmell);
        smells.add(NONStaticSmell);
        smells.add(SQLSmell);
        smells.add(FileDirSmell);
        smells.add(LogSmell);
        smells.add(LogTagSmell);
        for (JCheckBox jCheckBox : smells) {
            jCheckBox.setSelected(true);
            jCheckBox.setToolTipText("坏味道详细说明");
            jCheckBox.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (jCheckBox.isSelected()) {
                        jCheckBox.setSelected(false);
                    } else {
                        jCheckBox.setSelected(true);
                    }
                }
            });
        }
        chooseFileField.setText(filePath);
        fileList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        fileList.setVisibleRowCount(-1);
        fileList.setListData(new String[]{filePath});
        btr_chooseFile.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                //super.mouseClicked(e);
                showFileChooser(filePath);
            }
        });
        btr_run.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                //super.mouseClicked(e);
                try {
                    new DetectoringDialog(virtualFiles, project, filePath);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }
                /*
                CodeSmellDetector codeSmellDetector;
                if (virtualFiles == null) {
                    codeSmellDetector = new CodeSmellDetector(new VirtualFile[]{LocalFileSystem.getInstance().findFileByPath(filePath)}, project);
                } else {
                    codeSmellDetector = new CodeSmellDetector(virtualFiles, project);
                }
                try {
                    codeSmellDetector.startCodeDec();
                } catch (InterruptedException | IOException | BadLocationException ex) {
                    ex.printStackTrace();
                }

                 */
                dispose();
            }
        });
        btr_chooseFile.setToolTipText("Click this button to choose files");
        btr_run.setToolTipText("Click this button to start detection");
        /*
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                //super.windowClosing(e);
                dispose();
            }
        });

         */
    }

    private void selectHMSmell() {

    }

    private void showFileChooser(String filePath) {
        FileChooserDescriptor descriptor = new FileChooserDescriptor(true, true, false, false, false, true);
        virtualFiles = FileChooser.chooseFiles(descriptor, project, LocalFileSystem.getInstance().findFileByPath(filePath));
        /*
        String name = "";
        for (VirtualFile virtualFile : virtualFiles) {
            name += "," + virtualFile.getName();
            System.out.println("get virtualfile path:" + virtualFile.getPath());
        }
         */
        chooseFileField.setText(StringUtils.join(virtualFiles, ";"));
        for (VirtualFile virtualFile : virtualFiles) {
            getFiles(virtualFile);
        }
        /* Swing JFilechoose组件 有卡顿感，转用FileChooser
        // 创建文件选择器
        JFileChooser jFileChooser = new JFileChooser();
        // 设置默认显示的文件夹为当前所在文件
        jFileChooser.setCurrentDirectory(new File(filePath));
        // 设置文件和文件夹都能选
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        // 不允许多选
        jFileChooser.setMultiSelectionEnabled(false);

        int result = jFileChooser.showOpenDialog(jPanel);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            chooseFileField.setText(file.getAbsolutePath());
        }

         */
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    private void getFiles(VirtualFile file) {
        if (file.isDirectory()) {
            for (VirtualFile file1 : file.getChildren()) {
                getFiles(file1);
            }
        } else {
            javaFiles.addAll(FileTypeIndex.getFiles(JavaFileType.INSTANCE, GlobalSearchScope.fileScope(Objects.requireNonNull(PsiManager.getInstance(project).findFile(file))))
                    .stream()
                    .map(vf -> new File(vf.getPath()))
                    .filter(File::isFile)
                    .collect(Collectors.toList()));
            xmlFiles.addAll(FileTypeIndex.getFiles(XmlFileType.INSTANCE, GlobalSearchScope.fileScope(Objects.requireNonNull(PsiManager.getInstance(project).findFile(file))))
                    .stream()
                    .map(vf -> new File(vf.getPath()))
                    .filter(File::isFile)
                    .collect(Collectors.toList()));
        }
    }
}
