package tang.ui;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.eclipse.jface.text.BadLocationException;
import org.jetbrains.annotations.NotNull;
import tang.CodeSmellDec.CodeSmellDetector;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

/**
 * @Author TangZT
 */
public class DetectoringDialog extends JDialog {
    private JProgressBar progressBar;
    private JPanel jPanel;
    private JTextArea outputText;
    private VirtualFile[] virtualFiles;
    private Project project;
    private CodeSmellDetector codeSmellDetector;

    public DetectoringDialog(VirtualFile[] virtualFiles, @NotNull Project project, String filePath) throws InterruptedException, IOException, BadLocationException {
        this.virtualFiles = virtualFiles;
        this.project = project;
        if (virtualFiles == null) {
            codeSmellDetector = new CodeSmellDetector(new VirtualFile[]{LocalFileSystem.getInstance().findFileByPath(filePath)}, project, this);
        } else {
            codeSmellDetector = new CodeSmellDetector(virtualFiles, project, this);
        }
        init();
    }

    private void init() throws InterruptedException, IOException, BadLocationException {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                pack();
                setLocationRelativeTo(null);
                setSize(350, 300);
                // 设置模态对话框
                setModal(true);
                setContentPane(jPanel);
                setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("坏味道检测中。。。");
                setVisible(true);
            }
        });
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        codeSmellDetector.startCodeDec();
    }

    public void updateProgress(Integer progressValue, String progressText) {
        progressBar.setValue(progressValue);
        outputText.setText(progressText);
    }

    public void done() {
        progressBar.setValue(100);
        dispose();
    }

    /*
    private void startDetectoring() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                progressBar.setValue(codeSmellDetector.getProgressValue());
                outputText.setText(codeSmellDetector.getProgressText());
            }
        });
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        }

     */

        /*
        SwingWorker<Boolean, Void> swingWorker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground(){
                try {
                    progressBar.setValue(codeSmellDetector.getProgressValue());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

         */

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jPanel = new JPanel();
        jPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        progressBar = new JProgressBar();
        jPanel.add(progressBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        jPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        outputText = new JTextArea();
        scrollPane1.setViewportView(outputText);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jPanel;
    }

    /*
    private class Task extends Thread{
        public Task(){}
        public void run(){
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    try {
                        codeSmellDetector.startCodeDec();
                    } catch (InterruptedException | IOException | BadLocationException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        }
    }

     */
}
